//design.jsx
import { useState } from "react";
import { FiChevronLeft, FiChevronRight } from "react-icons/fi";
import {
  FoundationType,
  SoilType,
  LoadType,
  InputParameters,
  Results,
  SelectionSummary,
} from "../components";

function Design() {
  const [activeTab, setActiveTab] = useState(0);
  const [designData, setDesignData] = useState({
    foundationType: null,
    soilType: null,
    loadType: null,
    inputs: {},
    results: null,
  });

  const tabs = [
    { id: 0, label: "Foundation", component: FoundationType },
    { id: 1, label: "Soil", component: SoilType },
    { id: 2, label: "Load Type", component: LoadType },
    { id: 3, label: "Inputs", component: InputParameters },
    { id: 4, label: "Results", component: Results },
  ];

  const updateDesignData = (key, value) => {
    setDesignData((prev) => ({ ...prev, [key]: value }));
  };

  const ActiveComponent = tabs[activeTab].component;

  const handleNext = () => {
    if (activeTab < tabs.length - 1) setActiveTab(activeTab + 1);
  };

  const handleBack = () => {
    if (activeTab > 0) setActiveTab(activeTab - 1);
  };

  return (
    <div className="flex flex-col lg:flex-row h-screen bg-gray-100">
      <div className="w-full lg:w-1/2 p-4 overflow-y-auto h-[50vh] lg:h-auto">
        <div className="flex justify-between items-center mb-2">
          <h1 className="text-xl md:text-2xl font-bold text-gray-600">
            Foundation Design
          </h1>
          <div className="text-xs md:text-sm text-gray-500">
            Eurocode (EN) <span className="font-medium">1992-1-1</span>,{" "}
            <span className="font-medium">1997-1</span>
          </div>
        </div>

        <SelectionSummary designData={designData} />

        <div className="flex items-center mb-4 space-x-4">
          <button
            onClick={handleBack}
            disabled={activeTab === 0}
            className={`p-2 rounded-full transition-colors ${
              activeTab === 0
                ? "text-gray-300 cursor-not-allowed"
                : "text-gray-600 hover:bg-gray-100"
            }`}
          >
            <FiChevronLeft className="w-4 h-4 md:w-5 md:h-5 lg:w-6 lg:h-6" />
          </button>

          <div className="flex-1 overflow-x-auto">
            <div className="flex space-x-1 pb-2">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  disabled={
                    (tab.id === 1 && !designData.foundationType) ||
                    (tab.id === 2 && !designData.soilType) ||
                    (tab.id === 3 && !designData.loadType) ||
                    (tab.id === 4 && !designData.inputs)
                  }
                  className={`relative px-4 py-2 text-xs md:text-sm lg:text-base font-medium transition-all duration-200 ${
                    activeTab === tab.id
                      ? "text-[#145da0]"
                      : "text-gray-500 hover:text-gray-700"
                  } ${
                    (tab.id === 1 && !designData.foundationType) ||
                    (tab.id === 2 && !designData.soilType) ||
                    (tab.id === 3 && !designData.loadType) ||
                    (tab.id === 4 && !designData.inputs)
                      ? "opacity-50 cursor-not-allowed"
                      : "cursor-pointer"
                  }`}
                >
                  {tab.label}
                  {activeTab === tab.id && (
                    <span className="absolute bottom-0 left-0 right-0 h-[0.1rem] lg:h-0.5 bg-[#145da0] rounded-full" />
                  )}
                </button>
              ))}
            </div>
          </div>

          <button
            onClick={handleNext}
            disabled={
              (activeTab === 0 && !designData.foundationType) ||
              (activeTab === 1 && !designData.soilType) ||
              (activeTab === 2 && !designData.loadType) ||
              (activeTab === 3 && !designData.inputs) ||
              activeTab === tabs.length - 1
            }
            className={`p-2 rounded-full ${
              (activeTab === 0 && !designData.foundationType) ||
              (activeTab === 1 && !designData.soilType) ||
              (activeTab === 2 && !designData.loadType) ||
              (activeTab === 3 && !designData.inputs) ||
              activeTab === tabs.length - 1
                ? "text-gray-300 cursor-not-allowed"
                : "text-gray-600 hover:bg-gray-200"
            }`}
          >
            <FiChevronRight className="w-4 h-4 md:w-5 md:h-5 lg:w-6 lg:h-6" />
          </button>
        </div>

        <div className="bg-white p-4 md:p-6 rounded-lg shadow-sm border border-gray-200 mb-4 overflow-visible">
          <ActiveComponent
            data={designData}
            updateData={updateDesignData}
            setActiveTab={setActiveTab}
          />
        </div>
      </div>

      <div className="w-full lg:w-1/2 bg-gray-100 border-t lg:border-t-0 lg:border-l border-gray-200 overflow-y-auto h-[50vh] lg:h-auto">
        <div className="h-full w-full bg-white border-2 border-dashed border-gray-300 flex items-center justify-center">
          <div className="p-4">
            <span className="text-gray-400 block">Interactive Diagram</span>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Design;



//foundationtype.jsx
import { FaCube, FaObjectGroup, FaLink } from "react-icons/fa";
import { GiBrickWall } from "react-icons/gi";
import { styles } from "../../styles";
import { GuidanceSection, SelectionBox } from "../";

const foundationTypes = [
  {
    id: "isolated",
    name: "Isolated Footing",
    icon: <FaCube className="text-2xl" />,
    description: "Single column support for stable soils",
    useCase: "Best for: Individual columns with moderate loads",
  },
  {
    id: "combined",
    name: "Combined Footing",
    icon: <FaObjectGroup className="text-2xl" />,
    description: "Supports multiple closely-spaced columns",
    useCase: "Best for: Adjacent columns where isolated footings would overlap",
  },
  {
    id: "strap",
    name: "Strap Footing",
    icon: <FaLink className="text-2xl" />,
    description: "Connected footings with a beam",
    useCase: "Best for: Eccentric loading or property line constraints",
  },
  {
    id: "retaining",
    name: "Retaining Wall",
    icon: <GiBrickWall className="text-2xl" />,
    description: "Supports lateral earth pressure",
    useCase: "Best for: Slope stabilization and basement walls",
  },
];

const guidanceItems = [
  {
    main: "Isolated footings are most economical for standard structures.",
    detail: "Saves 15-20% compared to combined footings in typical cases.",
  },
  {
    main: "Choose combined footings when column spacing is less than 2m.",
    detail: "Prevents overlapping stress zones in dense layouts.",
  },
  {
    main: "Strap footings help when one column is near a property line.",
    detail: "The connecting beam redistributes eccentric loads.",
  },
  {
    main: "Retaining walls require special consideration of lateral forces.",
    detail: "Hydrostatic pressure and soil friction must be calculated.",
  },
];

function FoundationType({ data, updateData, setActiveTab }) {
  const handleSelect = (type) => {
    updateData("foundationType", type);
    setActiveTab(1);
  };

  return (
    <div className="max-w-3xl mx-auto">
      <h2 className={`${styles.sectionTitleText}`}>Foundation Type</h2>
      <p className={`${styles.sectionBodyText} mb-6`}>
        Select the foundation type that matches your project requirements
      </p>

      <SelectionBox
        options={foundationTypes}
        selectedValue={data.foundationType}
        onSelect={handleSelect}
      />

      <GuidanceSection
        title="Selection Guidance"
        items={guidanceItems}
        tip="Tip: Soil conditions and load requirements affect foundation selection"
      />
    </div>
  );
}

export default FoundationType;


//soiltype.jsx
import { FaMountain, FaRuler } from "react-icons/fa";
import { styles } from "../../styles";
import { GiWaterDrop, GiPowder } from "react-icons/gi";
import { GuidanceSection, SelectionBox } from "../";

const soilTypes = [
  {
    id: "CUST",
    name: "Custom Bearing Capacity",
    icon: <FaRuler className="text-2xl" />,
    description: "User-specified bearing capacity",
    useCase: "Best for: Pre-calculated or empirical values",
  },
  {
    id: "CU",
    name: "Clay (Undrained)",
    icon: <GiWaterDrop className="text-2xl" />,
    description: "Short-term behavior for all fine-grained soils",
    useCase: "Best for: Silts and clays under immediate loading",
  },
  {
    id: "CD",
    name: "Clay (Drained)",
    icon: <FaMountain className="text-2xl" />,
    description: "Long-term behavior for cohesive soils",
    useCase: "Best for: Consolidated clays and silty clays",
  },
  {
    id: "S",
    name: "Sand",
    icon: <GiPowder className="text-2xl" />,
    description: "Drained behavior for granular materials",
    useCase: "Best for: Sands, gravels, and silty sands",
  },
];

const guidanceItems = [
  {
    main: "Custom option allows direct bearing capacity input.",
    detail:
      "Provide your calculated bearing capacity to bypass automatic calculations.",
  },
  {
    main: "Undrained analysis is conservative for all fine-grained soils.",
    detail:
      "Includes silty clays - uses total stress parameters (Sᵤ) with φ=0.",
  },
  {
    main: "Drained analysis covers long-term conditions.",
    detail:
      "Effective stress parameters (c', φ') work for clays and most silty soils.",
  },
  {
    main: "Sand analysis applies to all granular materials.",
    detail: "For gravels, increase φ' to 35°-45° in input parameters.",
  },
];

function SoilType({ data, updateData, setActiveTab }) {
  const handleSelect = (type) => {
    updateData("soilType", type);
    setActiveTab(2);
  };

  return (
    <div className="max-w-3xl mx-auto">
      <h2 className={`${styles.sectionTitleText}`}>Soil Behavior Type</h2>
      <p className={`${styles.sectionBodyText} mb-6`}>
        Select the soil behavior that matches your site conditions
      </p>

      <SelectionBox
        options={soilTypes}
        selectedValue={data.soilType}
        onSelect={handleSelect}
      />

      <GuidanceSection
        title="Selection Guidance"
        items={guidanceItems}
        tip="Tip: For silty soils, use 'Clay' types and adjust φ' accordingly"
      />
    </div>
  );
}

export default SoilType;

//LoadType.jsx
import { FaBalanceScale, FaCalculator } from "react-icons/fa";
import { styles } from "../../styles";
import { GuidanceSection, SelectionBox } from "../";

const loadTypes = [
  {
    id: "unfactored",
    name: "Unfactored Loads",
    icon: <FaBalanceScale className="text-2xl" />,
    description: "Service loads with separate dead/live components",
    useCase: "Best for: Entering dead and live load components separately",
  },
  {
    id: "factored",
    name: "Factored Loads",
    icon: <FaCalculator className="text-2xl" />,
    description: "Service loads from structural analysis software",
    useCase:
      "Best for: Using service load outputs from ETABS or similar software",
  },
];

const guidanceItems = [
  {
    main: "Unfactored loads allow precise control of load components.",
    detail:
      "Enter dead and live loads separately for accurate working stress calculations.",
  },
  {
    main: "Factored loads should use service combinations from analysis software.",
    detail:
      "Input 1.0DL + 1.0LL combinations directly from ETABS or similar programs.",
  },
  {
    main: "Working stress method applies a global safety factor of 3.0.",
    detail: "Bearing capacity is calculated as q_ultimate divided by 3.0.",
  },
  {
    main: "Moments require separate permanent/variable components when using Unfactored Loads.",
    detail:
      "Enter Mx and My moments with their dead and live load portions individually.",
  },
];

function LoadType({ data, updateData, setActiveTab }) {
  const handleSelect = (type) => {
    updateData("loadType", type);
    setActiveTab(3);
  };

  return (
    <div className="max-w-3xl mx-auto">
      <h2 className={`${styles.sectionTitleText}`}>Load Type</h2>
      <p className={`${styles.sectionBodyText} mb-6`}>
        Select how you want to input your foundation loads
      </p>

      <SelectionBox
        options={loadTypes}
        selectedValue={data.loadType}
        onSelect={handleSelect}
      />

      <GuidanceSection
        title="Selection Guidance"
        items={guidanceItems}
        tip="Tip: The working stress method with global safety factor is currently implemented"
      />
    </div>
  );
}

export default LoadType;




//selectionbox.jsx
import { IoChevronForward } from "react-icons/io5";
import { styles } from "../../styles";

function SelectionBox({ options, selectedValue, onSelect, className = "" }) {
  return (
    <div className={`grid grid-cols-1 gap-4 ${className}`}>
      {options.map((option) => (
        <button
          key={option.id}
          onClick={() => onSelect(option.id)}
          className={`p-5 border-2 rounded-xl text-left transition-all duration-200 flex items-center justify-between ${
            selectedValue === option.id
              ? "border-[#145da0] bg-[#f0f7ff] shadow-md"
              : "border-gray-200 hover:border-[#145da0]/50 hover:bg-[#f0f7ff]/50"
          }`}
        >
          <div className="flex items-start">
            <div className="mr-4 text-[#145da0] mt-1">{option.icon}</div>
            <div>
              <h3 className={`${styles.cardTitle}`}>{option.name}</h3>
              <p className={`${styles.cardDescription}`}>
                {option.description}
              </p>
              <p className={`${styles.cardUseCase}`}>{option.useCase}</p>
            </div>
          </div>
          <IoChevronForward className="text-gray-400 text-xl" />
        </button>
      ))}
    </div>
  );
}

export default SelectionBox;


//guidancesection.jsx
import { useState } from "react";
import { IoChevronForward, IoChevronDown } from "react-icons/io5";
import { Link } from "react-router-dom";

function GuidanceSection({ title, items, tip }) {
  const [isGuidanceVisible, setGuidanceVisible] = useState(false);

  return (
    <div className="mt-8">
      <button
        onClick={() => setGuidanceVisible(!isGuidanceVisible)}
        className="w-full flex items-center justify-between p-4"
        aria-expanded={isGuidanceVisible}
        aria-controls="guidance-content"
      >
        <div className="flex items-center text-[#145da0] hover:text-black">
          <span className="font-medium md:text-[18px] sm:text-[16px] text-[14px]">
            {title}
          </span>
          <span className="ml-2 md:text-[18px] sm:text-[16px] text-[14px]">
            {isGuidanceVisible ? (
              <IoChevronDown className="inline" />
            ) : (
              <IoChevronForward className="inline" />
            )}
          </span>
        </div>
      </button>

      <div
        id="guidance-content"
        className={`transition-[max-height,opacity] duration-300 ease-in-out overflow-hidden ${
          isGuidanceVisible
            ? "max-h-[var(--content-height)] opacity-100"
            : "max-h-0 opacity-0"
        }`}
        aria-hidden={!isGuidanceVisible}
        style={{ "--content-height": "500px" }}
      >
        <div className="px-5 pb-5 space-y-0">
          {items.map((item, index) => (
            <div key={index} className="p-3">
              <div className="flex">
                <div className="flex-shrink-0 mt-0.5 mr-3 text-blue-600">✓</div>
                <div>
                  <p className="font-medium text-gray-800 md:text-[16px] sm:text-[14px] text-[13px]">
                    {item.main}
                  </p>
                  {item.detail && (
                    <p className="mt-1.5 text-gray-600 pl-2 border-l-2 border-blue-200 md:text-[14px] sm:text-[12px] text-[11px]">
                      {item.detail}
                    </p>
                  )}
                </div>
              </div>
            </div>
          ))}

          <div className="mt-4 text-center">
            <Link
              href="#"
              className="text-[#145da0] font-medium hover:text-black transition duration-200 inline-flex items-center tracking-[0.3em] !font-sans px-6 py-2 uppercase"
              style={{
                fontSize: "clamp(0.6rem, 0.8vw, 0.75rem)",
              }}
            >
              Documentation
              <span className="ml-3 font-bold transform translate-y-[-0px] md:text-[14px] sm:text-[12px] text-[11px]">
                →
              </span>
            </Link>
          </div>

          <div className="mt-6 pt-6 border-t border-gray-200">
            <p className="text-gray-500 italic md:text-[14px] sm:text-[12px] text-[11px]">
              {tip}
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

export default GuidanceSection;


//style.js
const styles = {  
    paddingX: "sm:px-16 px-6",
    paddingY: "sm:py-16 py-6",
    padding: "sm:px-16 px-6 sm:py-16 py-10",
    
    heroHeadText:
      "font-black text-white lg:text-[80px] sm:text-[60px] xs:text-[50px] text-[40px] lg:leading-[98px] mt-2",
    heroSubText:
      "text-[#dfd9ff] font-medium lg:text-[30px] sm:text-[26px] xs:text-[20px] text-[16px] lg:leading-[40px]",
    
    sectionHeadText:
      "text-black font-bold md:text-[40px] sm:text-[30px] xs:text-[20px] text-[20px]",
    sectionSubText:
      "sm:text-[18px] text-[14px] text-secondary uppercase tracking-wider mt-4",
    sectionTitleText:
      "font-semibold text-black md:text-[24px] sm:text-[20px] xs:text-[18px] text-[16px]",
    sectionBodyText:
      "text-gray-700 sm:text-[16px] text-[14px] leading-relaxed",  
    sectionCardText:
      "text-gray-700 sm:text-[14px] text-[12px] leading-relaxed",  
    sectionGridThree:
      "grid grid-cols-1 md:grid-cols-3 gap-8 mt-12", 
    sectionGridFour:
      "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mt-16",  
    sectionContainer:
      "max-w-6.5xl mx-auto text-center",
    sectionCard:
      "bg-white p-6 rounded-lg shadow-md",
    sectionNumberBadge:
      "w-10 h-10 text-md sm:w-12 sm:h-12 sm:text-lg bg-[#145da0] text-white rounded-full mx-auto flex items-center justify-center font-bold mb-4",
    cardTitle: "font-semibold text-gray-800 md:text-[18px] sm:text-[16px] text-[14px]",
    cardDescription: "text-gray-600 sm:text-[14px] text-[12px] mt-1",
    cardUseCase: "text-[#145da0] font-medium sm:text-[12px] text-[10px] mt-2",
  };
  
  export { styles };


//inputparamets folder
//constants.js
// Helper function to generate consistent field definitions
const createField = (id, label, shortLabel, type, placeholder, unit, description, range, options) => ({
  id,
  label,
  shortLabel,
  type,
  placeholder,
  unit,
  tooltip: `${label} - ${description} - Valid values: ${range}`,
  required: true,
  ...(type === 'number' ? { min: range.split('-')[0].trim(), max: range.split('-')[1].split(' ')[0].trim() } : {}),
  ...(options ? { options } : {}),
});

// Common field configurations
const LOAD_FIELDS = {
  unfactored: [
    createField(
      'DL',
      'Permanent Load (Gk)',
      'Gk',
      'number',
      'e.g. 500',
      'kN',
      'Unfactored permanent vertical load',
      '200-4100 kN'
    ),
    createField(
      'LL',
      'Variable Load (Qk)',
      'Qk',
      'number',
      'e.g. 300',
      'kN',
      'Unfactored variable vertical load',
      '130-2100 kN'
    ),
    createField(
      'mxp',
      'Moment X Permanent',
      'Mx,Gk',
      'number',
      'e.g. 50',
      'kN-m',
      'Unfactored permanent moment about X-axis',
      '-1000-1000 kNm'
    ),
    createField(
      'mxv',
      'Moment X Variable',
      'Mx,Qk',
      'number',
      'e.g. 30',
      'kN-m',
      'Unfactored variable moment about X-axis',
      '-1000-1000 kNm'
    ),
    createField(
      'myp',
      'Moment Y Permanent',
      'My,Gk',
      'number',
      'e.g. 50',
      'kN-m',
      'Unfactored permanent moment about Y-axis',
      '-1000-1000 kNm'
    ),
    createField(
      'myv',
      'Moment Y Variable',
      'My,Qk',
      'number',
      'e.g. 30',
      'kN-m',
      'Unfactored variable moment about Y-axis',
      '-1000-1000 kNm'
    )
  ],
  factored: [
    createField(
      'NED',
      'Design Axial Load',
      'P',
      'number',
      'e.g. 1200',
      'kN',
      'Factored design axial load',
      '300-6000 kN'
    ),
    createField(
      'MXED',
      'Design Moment X',
      'Mx',
      'number',
      'e.g. 150',
      'kN-m',
      'Factored design moment about X-axis',
      '-1500-1500 kNm'
    ),
    createField(
      'MYED',
      'Design Moment Y',
      'My',
      'number',
      'e.g. 150',
      'kN-m',
      'Factored design moment about Y-axis',
      '-1500-1500 kNm'
    )
  ]
};

const MATERIAL_FIELDS = [
  createField(
    'FCK',
    'Concrete Strength',
    'fck',
    'number',
    'e.g. 25',
    'MPa',
    'Characteristic compressive strength',
    '25-100 MPa',
    { step: 5 }
  ),
  createField(
    'FYK',
    'Steel Strength',
    'fyk',
    'number',
    'e.g. 500',
    'MPa',
    'Characteristic yield strength',
    '100-1000 MPa',
    { step: 50 }
  ),
  createField(
    'BAR',
    'Rebar Diameter',
    'Ø',
    'number',
    'e.g. 16',
    'mm',
    'Main reinforcement bar size',
    '12-32 mm',
    { step: 2 }
  ),
  {
    ...createField(
      'COV',
      'Concrete Cover',
      'c',
      'select',
      '',
      '',
      'Nominal concrete cover to reinforcement',
      ''
    ),
    options: [
      { value: "40", label: "40 mm (Footing on lean concrete)" },
      { value: "75", label: "75 mm (Footing on soil)" }
    ],
    tooltip: "Concrete Cover - Nominal concrete cover to reinforcement"
  }
];

// Geometry fields by foundation type
const GEOMETRY_FIELDS = {
  isolated: [
    createField(
      'COL',
      'Column Width X',
      'b',
      'number',
      'e.g. 300',
      'mm',
      'Column dimension along X-axis',
      '100-1500 mm'
    ),
    createField(
      'COLY',
      'Column Width Y',
      'h',
      'number',
      'e.g. 300',
      'mm',
      'Column dimension along Y-axis',
      '100-1500 mm'
    )
  ],
  combined: [
    createField(
      'COL1',
      'Column 1 Width X',
      'b1',
      'number',
      'e.g. 300',
      'mm',
      'First column X dimension',
      '100-1500 mm'
    ),
    createField(
      'COLY1',
      'Column 1 Width Y',
      'h1',
      'number',
      'e.g. 300',
      'mm',
      'First column Y dimension',
      '100-1500 mm'
    ),
    createField(
      'COL2',
      'Column 2 Width X',
      'b2',
      'number',
      'e.g. 300',
      'mm',
      'Second column X dimension',
      '100-1500 mm'
    ),
    createField(
      'COLY2',
      'Column 2 Width Y',
      'h2',
      'number',
      'e.g. 300',
      'mm',
      'Second column Y dimension',
      '100-1500 mm'
    ),
    createField(
      'COL_SPACING',
      'Column Spacing',
      'L',
      'number',
      'e.g. 3000',
      'mm',
      'Distance between column centers',
      '500-10000 mm'
    )
  ],
  strap: [
    createField(
      'COL_MAIN',
      'Main Column Width',
      'bc',
      'number',
      'e.g. 400',
      'mm',
      'Primary column dimension',
      '100-1500 mm'
    ),
    createField(
      'COL_STRAP',
      'Strap Column Width',
      'bs',
      'number',
      'e.g. 300',
      'mm',
      'Secondary column dimension',
      '100-1500 mm'
    ),
    createField(
      'STRAP_LENGTH',
      'Strap Beam Length',
      'Ls',
      'number',
      'e.g. 2500',
      'mm',
      'Distance between columns',
      '500-10000 mm'
    )
  ],
  retaining: [
    createField(
      'WALL_HEIGHT',
      'Wall Height',
      'H',
      'number',
      'e.g. 2000',
      'mm',
      'Total wall height',
      '500-10000 mm'
    ),
    createField(
      'WALL_THICKNESS',
      'Wall Thickness',
      't',
      'number',
      'e.g. 300',
      'mm',
      'Base thickness of wall',
      '100-1500 mm'
    ),
    createField(
      'TOE_LENGTH',
      'Toe Length',
      'Lt',
      'number',
      'e.g. 1000',
      'mm',
      'Length of toe extension',
      '300-5000 mm'
    ),
    createField(
      'HEEL_LENGTH',
      'Heel Length',
      'Lh',
      'number',
      'e.g. 1500',
      'mm',
      'Length of heel extension',
      '300-5000 mm'
    )
  ]
};

// Soil fields by soil type
const SOIL_FIELDS = {
  CU: [
    createField(
      'DF',
      'Foundation Depth',
      'Df',
      'number',
      'e.g. 1500',
      'mm',
      'Depth from ground surface to footing base',
      '100-10000 mm'
    ),
    createField(
      'CU',
      'Undrained Cohesion',
      'Cu',
      'number',
      'e.g. 50',
      'kPa',
      'Soil undrained cohesion/shear strength',
      '1-1000 kPa'
    ),
    createField(
      'GAM',
      'Soil Unit Weight',
      'γ',
      'number',
      'e.g. 18',
      'kN/m³',
      'Unit weight of soil',
      '1.1-30 kN/m³',
      { step: 0.1 }
    )
  ],
  CD: [
    createField(
      'DF',
      'Foundation Depth',
      'Df',
      'number',
      'e.g. 1500',
      'mm',
      'Depth from ground surface to footing base',
      '100-10000 mm'
    ),
    createField(
      'C_PRIME',
      'Effective Cohesion',
      "c'",
      'number',
      'e.g. 5',
      'kPa',
      'Effective cohesion parameter',
      '0-200 kPa'
    ),
    createField(
      'PHI_PRIME',
      'Friction Angle',
      "φ'",
      'number',
      'e.g. 25',
      '°',
      'Effective angle of internal friction',
      '1-70°'
    ),
    createField(
      'GAM',
      'Soil Unit Weight',
      'γ',
      'number',
      'e.g. 18',
      'kN/m³',
      'Unit weight of soil',
      '1.1-30 kN/m³',
      { step: 0.1 }
    )
  ],
  S: [
    createField(
      'DF',
      'Foundation Depth',
      'Df',
      'number',
      'e.g. 1500',
      'mm',
      'Depth from ground surface to footing base',
      '100-10000 mm'
    ),
    createField(
      'PHI_PRIME',
      'Friction Angle',
      "φ'",
      'number',
      'e.g. 30',
      '°',
      'Effective angle of internal friction',
      '1-70°'
    ),
    createField(
      'GAM',
      'Soil Unit Weight',
      'γ',
      'number',
      'e.g. 18',
      'kN/m³',
      'Unit weight of soil',
      '1.1-30 kN/m³',
      { step: 0.1 }
    )
  ],
  CUST: [
    createField(
      'BC',
      'Bearing Capacity',
      'qa',
      'number',
      'e.g. 200',
      'kPa',
      'Allowable bearing capacity',
      '50-1000 kPa'
    )
  ]
};

export {
  LOAD_FIELDS as COMMON_FIELDS,
  MATERIAL_FIELDS,
  GEOMETRY_FIELDS,
  SOIL_FIELDS
};



//FOrmField.jsx
import React, { useState, useEffect, useRef, useCallback } from "react";
import { FaCircleInfo } from "react-icons/fa6";

const FormField = React.memo(({ field, register, errors }) => {
  const [isFocused, setIsFocused] = useState(false);
  const [tooltipStyle, setTooltipStyle] = useState({});
  const [isTooltipVisible, setIsTooltipVisible] = useState(false);
  const tooltipRef = useRef(null);

  const updateTooltipPosition = useCallback(() => {
    if (tooltipRef.current) {
      const rect = tooltipRef.current.getBoundingClientRect();
      setTooltipStyle({
        left: `${rect.left}px`,
        bottom: `${window.innerHeight - rect.top + 8}px`,
      });
    }
  }, []);

  useEffect(() => {
    updateTooltipPosition();
    const handleScroll = () => updateTooltipPosition();
    window.addEventListener("scroll", handleScroll, true);
    return () => window.removeEventListener("scroll", handleScroll, true);
  }, [updateTooltipPosition]);

  const error = errors[field.id];

  return (
    <div className="mb-4">
      <label
        htmlFor={field.id}
        className="text-gray-600 text-[11px] sm:text-[13px] font-medium block mb-1"
      >
        <div className="flex items-center gap-1.5">
          {field.displayLabel}
          {field.tooltip && (
            <div
              className="relative group"
              ref={tooltipRef}
              style={{ isolation: "isolate" }}
              onMouseEnter={updateTooltipPosition}
              onClick={() => setIsTooltipVisible((prev) => !prev)}
            >
              <FaCircleInfo className="w-3.5 h-3.5 text-gray-500 cursor-help" />
              <div
                className={`absolute z-[9999] ${
                  isTooltipVisible
                    ? "opacity-100 pointer-events-auto"
                    : "opacity-0 pointer-events-none"
                } group-hover:opacity-100 bottom-full left-0 mb-3 px-3 py-3 text-[11px] sm:text-[12.5px] bg-gray-800 text-white rounded min-w-[250px] whitespace-normal break-words transition-all duration-300 ease-out shadow-lg`}
                style={{
                  position: "fixed",
                  maxWidth: "calc(100vw - 2rem)",
                  ...tooltipStyle,
                }}
              >
                <div className="font-bold">{field.label}</div>
                {field.tooltip.split(" - ").map((part, index) => (
                  <div key={index}>{index === 0 ? null : part} </div>
                ))}
                <div className="absolute top-full left-3 w-0 h-0 border-l-8 border-r-8 border-t-8 border-l-transparent border-r-transparent border-t-gray-800" />
              </div>
            </div>
          )}
        </div>
      </label>

      <div className="flex items-stretch">
        <div
          className={`flex-1 border rounded-l-sm overflow-hidden ${
            isFocused
              ? "border-blue-500 ring-1 ring-blue-100"
              : error
              ? "border-red-500"
              : "border-gray-300"
          }`}
        >
          {field.type === "select" ? (
            <select
              id={field.id}
              {...register(field.id, { required: field.required })}
              className="w-full px-3 py-[0.4rem] border-none focus:outline-none text-[11px] sm:text-[13px] leading-tight"
              onFocus={() => setIsFocused(true)}
              onBlur={() => setIsFocused(false)}
            >
              {field.options?.map((option) => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          ) : (
            <input
              type={field.type}
              id={field.id}
              {...register(field.id, {
                required: field.required && "This field is required",
                min: field.min && {
                  value: field.min,
                  message: `Minimum value is ${field.min}`,
                },
                max: field.max && {
                  value: field.max,
                  message: `Maximum value is ${field.max}`,
                },
                valueAsNumber: field.type === "number",
              })}
              className="w-full px-3 py-[0.4rem] border-none focus:outline-none text-[11px] sm:text-[13px] leading-tight"
              placeholder={field.placeholder}
              onFocus={() => setIsFocused(true)}
              onBlur={() => setIsFocused(false)}
            />
          )}
        </div>
        {field.unit && (
          <span className="bg-gray-100 px-3 py-[0.4rem] text-gray-600 border-t border-b border-r border-gray-300 rounded-r-sm flex items-center text-[11px] sm:text-[13px] leading-tight">
            {field.unit}
          </span>
        )}
      </div>
      {error && <p className="text-red-500 text-xs mt-1">{error.message}</p>}
    </div>
  );
});

FormField.displayName = "FormField";

export default FormField;





//index.jsx
import React, { useCallback } from "react";
import { useForm } from "react-hook-form";
import { styles } from "../../../styles";
import FormField from "./FormField";
import {
  COMMON_FIELDS,
  MATERIAL_FIELDS,
  GEOMETRY_FIELDS,
  SOIL_FIELDS,
} from "./constants";

const InputParameters = ({ data, updateData, setActiveTab }) => {
  const { foundationType, soilType, loadType } = data;
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({
    defaultValues: data.inputs || {},
  });

  const SectionSeparator = ({ title }) => (
    <div className="w-full my-6">
      <h3 className={`${styles.cardTitle} !text-[#008080] mb-2`}>{title}</h3>
      <div className="w-full border-t border-gray-200" />
    </div>
  );

  const getGeometryFields = useCallback(() => {
    return GEOMETRY_FIELDS[foundationType] || [];
  }, [foundationType]);

  const getSoilFields = useCallback(() => {
    return SOIL_FIELDS[soilType] || [];
  }, [soilType]);

  const onSubmit = (formData) => {
    updateData("inputs", formData);
    setActiveTab(4);
  };

  return (
    <div className="max-w-3xl mx-auto">
      <h2 className={`${styles.sectionTitleText}`}>Inputs</h2>
      <p className={`${styles.sectionBodyText} mb-6`}>
        Enter the required parameters for your foundation design
      </p>

      <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
        <SectionSeparator title="Loads and Moments" />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {COMMON_FIELDS[loadType].map((field) => (
            <FormField
              key={field.id}
              field={{
                ...field,
                displayLabel: field.shortLabel || field.id,
              }}
              register={register}
              errors={errors}
            />
          ))}
        </div>

        <SectionSeparator title="Geometry" />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {getGeometryFields().map((field) => (
            <FormField
              key={field.id}
              field={{
                ...field,
                displayLabel: field.shortLabel || field.id,
              }}
              register={register}
              errors={errors}
            />
          ))}
        </div>

        <SectionSeparator title="Soil Properties" />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {getSoilFields().map((field) => (
            <FormField
              key={field.id}
              field={{
                ...field,
                displayLabel: field.shortLabel || field.id,
              }}
              register={register}
              errors={errors}
            />
          ))}
        </div>

        <SectionSeparator title="Material Properties" />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {MATERIAL_FIELDS.map((field) => (
            <FormField
              key={field.id}
              field={{
                ...field,
                displayLabel: field.shortLabel || field.id,
              }}
              register={register}
              errors={errors}
            />
          ))}
        </div>

        <div className="flex justify-end mt-8">
          <button
            type="submit"
            className={`${styles.cardTitle} px-6 py-2 bg-[#145da0] text-white rounded-md hover:bg-[#0e4a7c] transition-colors focus:outline-none focus:ring-2 focus:ring-blue-300 focus:ring-offset-2 shadow-sm`}
          >
            Calculate Design
          </button>
        </div>
      </form>
    </div>
  );
};

export default InputParameters;

//Results.jsx
import { useEffect, useState } from "react";
import { styles } from "../../styles";
import { ResultCard } from "../shared";

function Results({ data, updateData }) {
  const [results, setResults] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchResults = async () => {
      try {
        const response = await fetch("/api/design", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            foundationType: data.foundationType,
            inputs: data.inputs,
          }),
        });

        if (!response.ok) {
          throw new Error(await response.text());
        }

        const results = await response.json();
        setResults(results);
        updateData("results", results);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchResults();
  }, [data, updateData]);

  if (loading) return <div className="text-center py-8">Calculating...</div>;
  if (error) return <div className="text-red-500 p-4">Error: {error}</div>;

  return (
    <div className="max-w-3xl mx-auto">
      <h2 className={`${styles.sectionTitleText}`}>Isolated Footing Results</h2>

      {results && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
          <ResultCard
            title="Dimensions"
            items={[
              { label: "Width (B)", value: `${results.width} m` },
              { label: "Depth (D)", value: `${results.depth} m` },
            ]}
          />
          <ResultCard
            title="Reinforcement"
            items={[
              { label: "Area", value: `${results.reinforcement_area} mm²/m` },
            ]}
          />
        </div>
      )}
    </div>
  );
}

export default Results;


//ResultCard.jsx
function ResultCard({ title, value, unit, description }) {
  return (
    <div className="bg-gray-50 p-4 rounded-lg border border-gray-200 mb-4">
      <h3 className="font-medium text-gray-700">{title}</h3>
      <div className="flex items-baseline mt-2">
        <p className="text-2xl font-bold text-[#145da0] mr-2">{value}</p>
        {unit && <span className="text-gray-500">{unit}</span>}
      </div>
      {description && (
        <p className="mt-2 text-sm text-gray-600">{description}</p>
      )}
    </div>
  );
}

export default ResultCard;








//index.js  
import { lazy } from 'react';

export { default as Navbar } from "./Navbar";
export { default as Footer } from "./Footer";
export { default as FeatureCard } from "./FeatureCard";
export { default as WhyChooseCard } from "./WhyChooseCard";
export { default as AdvantageCard } from "./AdvantageCard";
export { default as ComplianceItem } from "./ComplianceItem";
export const PricingTabs = lazy(() => import("./PricingTabs"));

export { default as FoundationType } from './DesignTabs/FoundationType';
export { default as InputParameters } from './DesignTabs/InputParameters/index.jsx';
export { default as Results } from './DesignTabs/Results';
export { default as SoilType } from './DesignTabs/SoilType';
export { default as SelectionSummary } from './DesignTabs/SelectionSummary';

export { default as ResultCard } from './shared/ResultCard';
export { default as TabButton } from './shared/TabButton';
export { default as GuidanceSection } from './shared/GuidanceSection';
export { default as SelectionBox } from './shared/SelectionBox';