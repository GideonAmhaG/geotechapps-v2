//design.jsx
import { useState } from "react";
import { FiChevronLeft, FiChevronRight } from "react-icons/fi";
import {
  FoundationType,
  SoilType,
  InputParameters,
  Results,
  SelectionSummary,
} from "../components";

export default function Design() {
  const [activeTab, setActiveTab] = useState(0);
  const [designData, setDesignData] = useState({
    foundationType: null,
    soilType: null,
    inputs: {},
    results: null,
  });

  const tabs = [
    { id: 0, label: "Foundation", component: FoundationType },
    { id: 1, label: "Soil", component: SoilType },
    { id: 2, label: "Inputs", component: InputParameters },
    { id: 3, label: "Results", component: Results },
  ];

  const updateDesignData = (key, value) => {
    setDesignData((prev) => ({ ...prev, [key]: value }));
  };

  const ActiveComponent = tabs[activeTab].component;

  const handleNext = () => {
    if (activeTab < tabs.length - 1) setActiveTab(activeTab + 1);
  };

  const handleBack = () => {
    if (activeTab > 0) setActiveTab(activeTab - 1);
  };

  return (
    <div className="flex flex-col lg:flex-row h-screen bg-gray-100">
      {/* Left Panel (Inputs) */}
      <div className="w-full lg:w-1/2 p-4 overflow-y-auto h-[50vh] lg:h-auto">
        <div className="flex justify-between items-center mb-2">
          <h1 className="text-xl md:text-2xl font-bold text-gray-600">
            Foundation Design
          </h1>
          <div className="text-xs md:text-sm text-gray-500">
            Eurocode (EN) <span className="font-medium">1992-1-1</span>,{" "}
            <span className="font-medium">1997-1</span>
          </div>
        </div>

        {/* Render the SelectionSummary component here */}
        <SelectionSummary designData={designData} />

        <div className="flex items-center mb-4 space-x-4">
          <button
            onClick={handleBack}
            disabled={activeTab === 0}
            className={`p-2 rounded-full transition-colors ${
              activeTab === 0
                ? "text-gray-300 cursor-not-allowed"
                : "text-gray-600 hover:bg-gray-100"
            }`}
          >
            <FiChevronLeft className="w-4 h-4 md:w-5 md:h-5 lg:w-6 lg:h-6" />
          </button>

          <div className="flex-1 overflow-x-auto">
            <div className="flex space-x-1 pb-2">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  disabled={
                    (tab.id === 1 && !designData.foundationType) ||
                    (tab.id === 2 && !designData.soilType) ||
                    (tab.id === 3 && !designData.inputs)
                  }
                  className={`relative px-4 py-2 text-xs md:text-sm lg:text-base font-medium transition-all duration-200 ${
                    activeTab === tab.id
                      ? "text-[#145da0]"
                      : "text-gray-500 hover:text-gray-700"
                  } ${
                    (tab.id === 1 && !designData.foundationType) ||
                    (tab.id === 2 && !designData.soilType) ||
                    (tab.id === 3 && !designData.inputs)
                      ? "opacity-50 cursor-not-allowed"
                      : "cursor-pointer"
                  }`}
                >
                  {tab.label}
                  {activeTab === tab.id && (
                    <span className="absolute bottom-0 left-0 right-0 h-[0.1rem] lg:h-0.5 bg-[#145da0] rounded-full" />
                  )}
                </button>
              ))}
            </div>
          </div>

          <button
            onClick={handleNext}
            disabled={
              (activeTab === 0 && !designData.foundationType) ||
              (activeTab === 1 && !designData.soilType) ||
              (activeTab === 2 && !designData.inputs) ||
              activeTab === tabs.length - 1
            }
            className={`p-2 rounded-full ${
              (activeTab === 0 && !designData.foundationType) ||
              (activeTab === 1 && !designData.soilType) ||
              (activeTab === 2 && !designData.inputs) ||
              activeTab === tabs.length - 1
                ? "text-gray-300 cursor-not-allowed"
                : "text-gray-600 hover:bg-gray-200"
            }`}
          >
            <FiChevronRight className="w-4 h-4 md:w-5 md:h-5 lg:w-6 lg:h-6" />
          </button>
        </div>

        <div className="bg-white p-4 md:p-6 rounded-lg shadow-sm border border-gray-200 mb-4 overflow-visible">
          <ActiveComponent
            data={designData}
            updateData={updateDesignData}
            setActiveTab={setActiveTab}
          />
        </div>
      </div>

      {/* Right Panel (Visuals) */}
      <div className="w-full lg:w-1/2 bg-gray-100 border-t lg:border-t-0 lg:border-l border-gray-200 overflow-y-auto h-[50vh] lg:h-auto">
        <div className="h-full w-full bg-white border-2 border-dashed border-gray-300 flex items-center justify-center">
          <div className="p-4">
            <span className="text-gray-400 block">Interactive Diagram</span>
          </div>
        </div>
      </div>
    </div>
  );
}


//foundationtype.jsx
import { FaCube, FaObjectGroup, FaLink } from "react-icons/fa";
import { GiBrickWall } from "react-icons/gi";
import { styles } from "../../styles";
import { GuidanceSection, SelectionBox } from "../";

const foundationTypes = [
  {
    id: "isolated",
    name: "Isolated Footing",
    icon: <FaCube className="text-2xl" />,
    description: "Single column support for stable soils",
    useCase: "Best for: Individual columns with moderate loads",
  },
  {
    id: "combined",
    name: "Combined Footing",
    icon: <FaObjectGroup className="text-2xl" />,
    description: "Supports multiple closely-spaced columns",
    useCase: "Best for: Adjacent columns where isolated footings would overlap",
  },
  {
    id: "strap",
    name: "Strap Footing",
    icon: <FaLink className="text-2xl" />,
    description: "Connected footings with a beam",
    useCase: "Best for: Eccentric loading or property line constraints",
  },
  {
    id: "retaining",
    name: "Retaining Wall",
    icon: <GiBrickWall className="text-2xl" />,
    description: "Supports lateral earth pressure",
    useCase: "Best for: Slope stabilization and basement walls",
  },
];

const guidanceItems = [
  {
    main: "Isolated footings are most economical for standard structures.",
    detail: "Saves 15-20% compared to combined footings in typical cases.",
  },
  {
    main: "Choose combined footings when column spacing is less than 2m.",
    detail: "Prevents overlapping stress zones in dense layouts.",
  },
  {
    main: "Strap footings help when one column is near a property line.",
    detail: "The connecting beam redistributes eccentric loads.",
  },
  {
    main: "Retaining walls require special consideration of lateral forces.",
    detail: "Hydrostatic pressure and soil friction must be calculated.",
  },
];

export default function FoundationType({ data, updateData, setActiveTab }) {
  const handleSelect = (type) => {
    updateData("foundationType", type);
    setActiveTab(1);
  };

  return (
    <div className="max-w-3xl mx-auto">
      <h2 className={`${styles.sectionTitleText}`}>Foundation Type</h2>
      <p className={`${styles.sectionBodyText} mb-6`}>
        Select the foundation type that matches your project requirements
      </p>

      <SelectionBox
        options={foundationTypes}
        selectedValue={data.foundationType}
        onSelect={handleSelect}
      />

      <GuidanceSection
        title="Selection Guidance"
        items={guidanceItems}
        tip="Tip: Soil conditions and load requirements affect foundation selection"
      />
    </div>
  );
}


//soiltype.jsx
import { FaMountain, FaRuler } from "react-icons/fa";
import { styles } from "../../styles";
import { GiWaterDrop, GiPowder } from "react-icons/gi";
import { GuidanceSection, SelectionBox } from "../";

const soilTypes = [
  {
    id: "CU",
    name: "Clay (Undrained)",
    icon: <GiWaterDrop className="text-2xl" />,
    description: "Short-term behavior for all fine-grained soils",
    useCase: "Best for: Silts and clays under immediate loading",
  },
  {
    id: "CD",
    name: "Clay (Drained)",
    icon: <FaMountain className="text-2xl" />,
    description: "Long-term behavior for cohesive soils",
    useCase: "Best for: Consolidated clays and silty clays",
  },
  {
    id: "S",
    name: "Sand",
    icon: <GiPowder className="text-2xl" />,
    description: "Drained behavior for granular materials",
    useCase: "Best for: Sands, gravels, and silty sands",
  },
  {
    id: "CUST",
    name: "Custom Bearing Capacity",
    icon: <FaRuler className="text-2xl" />,
    description: "User-specified bearing capacity",
    useCase: "Best for: Pre-calculated or empirical values",
  },
];

const guidanceItems = [
  {
    main: "Undrained analysis is conservative for all fine-grained soils.",
    detail:
      "Includes silty clays - uses total stress parameters (Sᵤ) with φ=0.",
  },
  {
    main: "Drained analysis covers long-term conditions.",
    detail:
      "Effective stress parameters (c', φ') work for clays and most silty soils.",
  },
  {
    main: "Sand analysis applies to all granular materials.",
    detail: "For gravels, increase φ' to 35°-45° in input parameters.",
  },
  {
    main: "Custom option allows direct bearing capacity input.",
    detail:
      "Provide your calculated bearing capacity to bypass automatic calculations.",
  },
];

export default function SoilType({ data, updateData, setActiveTab }) {
  const handleSelect = (type) => {
    updateData("soilType", type);
    setActiveTab(2);
  };

  return (
    <div className="max-w-3xl mx-auto">
      <h2 className={`${styles.sectionTitleText}`}>Soil Behavior Type</h2>
      <p className={`${styles.sectionBodyText} mb-6`}>
        Select the soil behavior that matches your site conditions
      </p>

      <SelectionBox
        options={soilTypes}
        selectedValue={data.soilType}
        onSelect={handleSelect}
      />

      <GuidanceSection
        title="Selection Guidance"
        items={guidanceItems}
        tip="Tip: For silty soils, use 'Clay' types and adjust φ' accordingly"
      />
    </div>
  );
}

//selectionbox.jsx
import { IoChevronForward } from "react-icons/io5";
import { styles } from "../../styles";

export default function SelectionBox({
  options,
  selectedValue,
  onSelect,
  className = "",
}) {
  return (
    <div className={`grid grid-cols-1 gap-4 ${className}`}>
      {options.map((option) => (
        <button
          key={option.id}
          onClick={() => onSelect(option.id)}
          className={`p-5 border-2 rounded-xl text-left transition-all duration-200 flex items-center justify-between ${
            selectedValue === option.id
              ? "border-[#145da0] bg-[#f0f7ff] shadow-md"
              : "border-gray-200 hover:border-[#145da0]/50 hover:bg-[#f0f7ff]/50"
          }`}
        >
          <div className="flex items-start">
            <div className="mr-4 text-[#145da0] mt-1">{option.icon}</div>
            <div>
              <h3 className={`${styles.cardTitle}`}>{option.name}</h3>
              <p className={`${styles.cardDescription}`}>
                {option.description}
              </p>
              <p className={`${styles.cardUseCase}`}>{option.useCase}</p>
            </div>
          </div>
          <IoChevronForward className="text-gray-400 text-xl" />
        </button>
      ))}
    </div>
  );
}

//guidancesection.jsx
import { useState } from "react";
import { IoChevronForward, IoChevronDown } from "react-icons/io5";
import { Link } from "react-router-dom";

export default function GuidanceSection({ title, items, tip }) {
  const [isGuidanceVisible, setGuidanceVisible] = useState(false);

  return (
    <div className="mt-8">
      <button
        onClick={() => setGuidanceVisible(!isGuidanceVisible)}
        className="w-full flex items-center justify-between p-4"
        aria-expanded={isGuidanceVisible}
        aria-controls="guidance-content"
      >
        <div className="flex items-center text-[#145da0] hover:text-black">
          <span className="font-medium md:text-[18px] sm:text-[16px] text-[14px]">
            {title}
          </span>
          <span className="ml-2 md:text-[18px] sm:text-[16px] text-[14px]">
            {isGuidanceVisible ? (
              <IoChevronDown className="inline" />
            ) : (
              <IoChevronForward className="inline" />
            )}
          </span>
        </div>
      </button>

      <div
        id="guidance-content"
        className={`transition-[max-height,opacity] duration-300 ease-in-out overflow-hidden ${
          isGuidanceVisible
            ? "max-h-[var(--content-height)] opacity-100"
            : "max-h-0 opacity-0"
        }`}
        aria-hidden={!isGuidanceVisible}
        style={{ "--content-height": "500px" }}
      >
        <div className="px-5 pb-5 space-y-0">
          {items.map((item, index) => (
            <div key={index} className="p-3">
              <div className="flex">
                <div className="flex-shrink-0 mt-0.5 mr-3 text-blue-600">✓</div>
                <div>
                  <p className="font-medium text-gray-800 md:text-[16px] sm:text-[14px] text-[13px]">
                    {item.main}
                  </p>
                  {item.detail && (
                    <p className="mt-1.5 text-gray-600 pl-2 border-l-2 border-blue-200 md:text-[14px] sm:text-[12px] text-[11px]">
                      {item.detail}
                    </p>
                  )}
                </div>
              </div>
            </div>
          ))}

          <div className="mt-4 text-center">
            <Link
              href="#"
              className="text-[#145da0] font-medium hover:text-black transition duration-200 inline-flex items-center tracking-[0.3em] !font-sans px-6 py-2 uppercase"
              style={{
                fontSize: "clamp(0.6rem, 0.8vw, 0.75rem)",
              }}
            >
              Documentation
              <span className="ml-3 font-bold transform translate-y-[-0px] md:text-[14px] sm:text-[12px] text-[11px]">
                →
              </span>
            </Link>
          </div>

          <div className="mt-6 pt-6 border-t border-gray-200">
            <p className="text-gray-500 italic md:text-[14px] sm:text-[12px] text-[11px]">
              {tip}
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

//style.js
const styles = {  
    paddingX: "sm:px-16 px-6",
    paddingY: "sm:py-16 py-6",
    padding: "sm:px-16 px-6 sm:py-16 py-10",
    
    heroHeadText:
      "font-black text-white lg:text-[80px] sm:text-[60px] xs:text-[50px] text-[40px] lg:leading-[98px] mt-2",
    heroSubText:
      "text-[#dfd9ff] font-medium lg:text-[30px] sm:text-[26px] xs:text-[20px] text-[16px] lg:leading-[40px]",
    
    sectionHeadText:
      "text-black font-bold md:text-[40px] sm:text-[30px] xs:text-[20px] text-[20px]",
    sectionSubText:
      "sm:text-[18px] text-[14px] text-secondary uppercase tracking-wider mt-4",
    sectionTitleText:
      "font-semibold text-black md:text-[24px] sm:text-[20px] xs:text-[18px] text-[16px]",
    sectionBodyText:
      "text-gray-700 sm:text-[16px] text-[14px] leading-relaxed",  
    sectionCardText:
      "text-gray-700 sm:text-[14px] text-[12px] leading-relaxed",  
    sectionGridThree:
      "grid grid-cols-1 md:grid-cols-3 gap-8 mt-12", 
    sectionGridFour:
      "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mt-16",  
    sectionContainer:
      "max-w-6.5xl mx-auto text-center",
    sectionCard:
      "bg-white p-6 rounded-lg shadow-md",
    sectionNumberBadge:
      "w-10 h-10 text-md sm:w-12 sm:h-12 sm:text-lg bg-[#145da0] text-white rounded-full mx-auto flex items-center justify-center font-bold mb-4",
    cardTitle: "font-semibold text-gray-800 md:text-[18px] sm:text-[16px] text-[14px]",
    cardDescription: "text-gray-600 sm:text-[14px] text-[12px] mt-1",
    cardUseCase: "text-[#145da0] font-medium sm:text-[12px] text-[10px] mt-2",
  };
  
  export { styles };

//inputparamets.jsx
import React, { useCallback, useRef, useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { FaCircleInfo } from "react-icons/fa6";
import { styles } from "../../styles";

const COMMON_FIELDS = [
  {
    id: "DL",
    label: "Gk",
    type: "number",
    placeholder: "e.g. 500",
    unit: "kN",
    tooltip: "Permanent Load (Gk) - Unfactored permanent vertical load",
    required: true,
    min: 0,
  },
  {
    id: "LL",
    label: "Qk",
    type: "number",
    placeholder: "e.g. 300",
    unit: "kN",
    tooltip: "Variable Load (Qk) - Unfactored variable vertical load",
    required: true,
    min: 0,
  },
  {
    id: "mxp",
    label: "Moment X Permanent",
    type: "number",
    placeholder: "e.g. 50",
    unit: "kN-m",
    tooltip: "Moment X Permanent - Unfactored permanent moment about X-axis",
    required: true,
  },
  {
    id: "mxv",
    label: "Moment X Variable",
    type: "number",
    placeholder: "e.g. 30",
    unit: "kN-m",
    tooltip: "Moment X Variable - Unfactored variable moment about X-axis",
    required: true,
  },
  {
    id: "myp",
    label: "Moment Y Permanent",
    type: "number",
    placeholder: "e.g. 50",
    unit: "kN-m",
    tooltip: "Moment Y Permanent - Unfactored permanent moment about Y-axis",
    required: true,
  },
  {
    id: "myv",
    label: "Moment Y Variable",
    type: "number",
    placeholder: "e.g. 30",
    unit: "kN-m",
    tooltip: "Moment Y Variable - Unfactored variable moment about Y-axis",
    required: true,
  },
];

const MATERIAL_FIELDS = [
  {
    id: "FCK",
    label: "Concrete Strength",
    type: "number",
    placeholder: "e.g. 25",
    unit: "MPa",
    tooltip: "Concrete Strength - Characteristic compressive strength",
    required: true,
    min: 20,
    max: 60,
  },
  {
    id: "FYK",
    label: "Steel Strength",
    type: "number",
    placeholder: "e.g. 500",
    unit: "MPa",
    tooltip: "Steel Strength - Characteristic yield strength",
    required: true,
    min: 400,
    max: 600,
  },
  {
    id: "BAR",
    label: "Rebar Diameter",
    type: "number",
    placeholder: "e.g. 16",
    unit: "mm",
    tooltip: "Rebar Diameter - Main reinforcement bar size",
    required: true,
    min: 8,
    max: 32,
  },
  {
    id: "COV",
    label: "Concrete Cover",
    type: "select",
    options: [
      { value: "40", label: "40 mm (Footing on lean concrete)" },
      { value: "75", label: "75 mm (Footing on soil)" },
    ],
    tooltip: "Concrete Cover - Nominal concrete cover to reinforcement",
    required: true,
  },
];

const FormField = React.memo(({ field, register, errors }) => {
  const [isFocused, setIsFocused] = useState(false);
  const [isHovered, setIsHovered] = useState(false);
  const [tooltipStyle, setTooltipStyle] = useState({});
  const tooltipRef = useRef(null);

  const updateTooltipPosition = useCallback(() => {
    if (tooltipRef.current) {
      const rect = tooltipRef.current.getBoundingClientRect();
      setTooltipStyle({
        left: `${rect.left}px`,
        bottom: `${window.innerHeight - rect.top + 8}px`,
      });
    }
  }, []);

  useEffect(() => {
    updateTooltipPosition();
    const handleScroll = () => updateTooltipPosition();
    window.addEventListener("scroll", handleScroll, true);
    return () => window.removeEventListener("scroll", handleScroll, true);
  }, [updateTooltipPosition]);

  const error = errors[field.id];

  return (
    <div className="mb-4">
      <label
        htmlFor={field.id}
        className={`text-gray-600 text-[11px] sm:text-[13px] font-medium block mb-1`}
      >
        <div className="flex items-center gap-1.5">
          {field.label}
          {field.tooltip && (
            <div
              className="relative group"
              ref={tooltipRef}
              style={{ isolation: "isolate" }}
              onMouseEnter={() => {
                setIsHovered(true);
                updateTooltipPosition();
              }}
              onMouseLeave={() => setIsHovered(false)}
            >
              <FaCircleInfo className="w-3.5 h-3.5 text-gray-500 cursor-help" />
              <div
                className="absolute z-[9999] opacity-0 group-hover:opacity-100 bottom-full left-0 mb-3 px-3 py-3 text-[11px] sm:text-[12.5px] bg-gray-800 text-white rounded min-w-[250px] whitespace-normal break-words transition-all duration-300 ease-out pointer-events-none group-hover:pointer-events-auto shadow-lg"
                style={{
                  position: "fixed",
                  maxWidth: "calc(100vw - 2rem)",
                  ...tooltipStyle,
                }}
              >
                {field.tooltip}
                <div className="absolute top-full left-3 w-0 h-0 border-l-8 border-r-8 border-t-8 border-l-transparent border-r-transparent border-t-gray-800" />
              </div>
            </div>
          )}
        </div>
      </label>

      <div className="flex items-stretch">
        <div
          className={`flex-1 border rounded-l-sm overflow-hidden ${
            isFocused
              ? "border-blue-500 ring-1 ring-blue-100"
              : error
              ? "border-red-500"
              : "border-gray-300"
          }`}
        >
          {field.type === "select" ? (
            <select
              id={field.id}
              {...register(field.id, { required: field.required })}
              className="w-full px-3 py-[0.4rem] border-none focus:outline-none text-[11px] sm:text-[13px] leading-tight"
              onFocus={() => setIsFocused(true)}
              onBlur={() => setIsFocused(false)}
            >
              {field.options.map((option) => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          ) : (
            <input
              type={field.type}
              id={field.id}
              {...register(field.id, {
                required: field.required && "This field is required",
                min: field.min && {
                  value: field.min,
                  message: `Minimum value is ${field.min}`,
                },
                max: field.max && {
                  value: field.max,
                  message: `Maximum value is ${field.max}`,
                },
                valueAsNumber: field.type === "number",
              })}
              className="w-full px-3 py-[0.4rem] border-none focus:outline-none text-[11px] sm:text-[13px] leading-tight"
              placeholder={field.placeholder}
              onFocus={() => setIsFocused(true)}
              onBlur={() => setIsFocused(false)}
            />
          )}
        </div>
        <span className="bg-gray-100 px-3 py-[0.4rem] text-gray-600 border-t border-b border-r border-gray-300 rounded-r-sm flex items-center text-[11px] sm:text-[13px] leading-tight">
          {field.unit}
        </span>
      </div>
      {error && <p className="text-red-500 text-xs mt-1">{error.message}</p>}
    </div>
  );
});

const SectionSeparator = ({ title }) => (
  <div className="w-full my-6">
    <h3 className={`${styles.cardTitle} !text-[#008080] mb-2`}>{title}</h3>
    <div className="w-full border-t border-gray-200" />
  </div>
);

export default function InputParameters({ data, updateData, setActiveTab }) {
  const { foundationType, soilType } = data;
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({
    defaultValues: data.inputs || {},
  });

  const getGeometryFields = useCallback(() => {
    const fields = {
      isolated: [
        {
          id: "COL",
          label: "Column Width X",
          type: "number",
          placeholder: "e.g. 300",
          unit: "mm",
          tooltip: "Column Width X - Column dimension along X-axis",
          required: true,
          min: 100,
        },
        {
          id: "COLY",
          label: "Column Width Y",
          type: "number",
          placeholder: "e.g. 300",
          unit: "mm",
          tooltip: "Column Width Y - Column dimension along Y-axis",
          required: true,
          min: 100,
        },
      ],
      combined: [
        {
          id: "COL1",
          label: "Column 1 Width X",
          type: "number",
          placeholder: "e.g. 300",
          unit: "mm",
          tooltip: "Column 1 Width X - First column X dimension",
          required: true,
          min: 100,
        },
        {
          id: "COLY1",
          label: "Column 1 Width Y",
          type: "number",
          placeholder: "e.g. 300",
          unit: "mm",
          tooltip: "Column 1 Width Y - First column Y dimension",
          required: true,
          min: 100,
        },
        {
          id: "COL2",
          label: "Column 2 Width X",
          type: "number",
          placeholder: "e.g. 300",
          unit: "mm",
          tooltip: "Column 2 Width X - Second column X dimension",
          required: true,
          min: 100,
        },
        {
          id: "COLY2",
          label: "Column 2 Width Y",
          type: "number",
          placeholder: "e.g. 300",
          unit: "mm",
          tooltip: "Column 2 Width Y - Second column Y dimension",
          required: true,
          min: 100,
        },
        {
          id: "COL_SPACING",
          label: "Column Spacing",
          type: "number",
          placeholder: "e.g. 3000",
          unit: "mm",
          tooltip: "Column Spacing - Distance between column centers",
          required: true,
          min: 500,
        },
      ],
      strap: [
        {
          id: "COL_MAIN",
          label: "Main Column Width",
          type: "number",
          placeholder: "e.g. 400",
          unit: "mm",
          tooltip: "Main Column Width - Primary column dimension",
          required: true,
          min: 100,
        },
        {
          id: "COL_STRAP",
          label: "Strap Column Width",
          type: "number",
          placeholder: "e.g. 300",
          unit: "mm",
          tooltip: "Strap Column Width - Secondary column dimension",
          required: true,
          min: 100,
        },
        {
          id: "STRAP_LENGTH",
          label: "Strap Beam Length",
          type: "number",
          placeholder: "e.g. 2500",
          unit: "mm",
          tooltip: "Strap Beam Length - Distance between columns",
          required: true,
          min: 500,
        },
      ],
      retaining: [
        {
          id: "WALL_HEIGHT",
          label: "Wall Height",
          type: "number",
          placeholder: "e.g. 2000",
          unit: "mm",
          tooltip: "Wall Height - Total wall height",
          required: true,
          min: 500,
        },
        {
          id: "WALL_THICKNESS",
          label: "Wall Thickness",
          type: "number",
          placeholder: "e.g. 300",
          unit: "mm",
          tooltip: "Wall Thickness - Base thickness of wall",
          required: true,
          min: 100,
        },
        {
          id: "TOE_LENGTH",
          label: "Toe Length",
          type: "number",
          placeholder: "e.g. 1000",
          unit: "mm",
          tooltip: "Toe Length - Length of toe extension",
          required: true,
          min: 300,
        },
        {
          id: "HEEL_LENGTH",
          label: "Heel Length",
          type: "number",
          placeholder: "e.g. 1500",
          unit: "mm",
          tooltip: "Heel Length - Length of heel extension",
          required: true,
          min: 300,
        },
      ],
    };
    return fields[foundationType] || [];
  }, [foundationType]);

  const getSoilFields = useCallback(() => {
    const fields = {
      CU: [
        {
          id: "DF",
          label: "Foundation Depth",
          type: "number",
          placeholder: "e.g. 1500",
          unit: "mm",
          tooltip:
            "Foundation Depth - Depth from ground surface to footing base",
          required: true,
          min: 300,
        },
        {
          id: "CU",
          label: "Undrained Cohesion",
          type: "number",
          placeholder: "e.g. 50",
          unit: "kPa",
          tooltip: "Undrained Cohesion - Soil undrained shear strength",
          required: true,
          min: 10,
        },
        {
          id: "GAM",
          label: "Soil Unit Weight",
          type: "number",
          placeholder: "e.g. 18",
          unit: "kN/m³",
          tooltip: "Soil Unit Weight - Unit weight of soil",
          required: true,
          min: 15,
          max: 22,
        },
      ],
      CD: [
        {
          id: "DF",
          label: "Foundation Depth",
          type: "number",
          placeholder: "e.g. 1500",
          unit: "mm",
          tooltip:
            "Foundation Depth - Depth from ground surface to footing base",
          required: true,
          min: 300,
        },
        {
          id: "C_PRIME",
          label: "Effective Cohesion",
          type: "number",
          placeholder: "e.g. 5",
          unit: "kPa",
          tooltip: "Effective Cohesion - Effective cohesion parameter",
          required: true,
          min: 0,
        },
        {
          id: "PHI_PRIME",
          label: "Friction Angle",
          type: "number",
          placeholder: "e.g. 25",
          unit: "°",
          tooltip: "Friction Angle - Effective angle of internal friction",
          required: true,
          min: 0,
          max: 45,
        },
        {
          id: "GAM",
          label: "Soil Unit Weight",
          type: "number",
          placeholder: "e.g. 18",
          unit: "kN/m³",
          tooltip: "Soil Unit Weight - Unit weight of soil",
          required: true,
          min: 15,
          max: 22,
        },
      ],
      S: [
        {
          id: "DF",
          label: "Foundation Depth",
          type: "number",
          placeholder: "e.g. 1500",
          unit: "mm",
          tooltip:
            "Foundation Depth - Depth from ground surface to footing base",
          required: true,
          min: 300,
        },
        {
          id: "PHI_PRIME",
          label: "Friction Angle",
          type: "number",
          placeholder: "e.g. 30",
          unit: "°",
          tooltip: "Friction Angle - Effective angle of internal friction",
          required: true,
          min: 25,
          max: 40,
        },
        {
          id: "GAM",
          label: "Soil Unit Weight",
          type: "number",
          placeholder: "e.g. 18",
          unit: "kN/m³",
          tooltip: "Soil Unit Weight - Unit weight of soil",
          required: true,
          min: 15,
          max: 22,
        },
      ],
      CUST: [
        {
          id: "BC",
          label: "Bearing Capacity",
          type: "number",
          placeholder: "e.g. 200",
          unit: "kPa",
          tooltip: "Bearing Capacity - Allowable bearing capacity",
          required: true,
          min: 50,
        },
        {
          id: "DF",
          label: "Foundation Depth",
          type: "number",
          placeholder: "e.g. 1500",
          unit: "mm",
          tooltip:
            "Foundation Depth - Depth from ground surface to footing base",
          required: true,
          min: 300,
        },
        {
          id: "GAM",
          label: "Soil Unit Weight",
          type: "number",
          placeholder: "e.g. 18",
          unit: "kN/m³",
          tooltip: "Soil Unit Weight - Unit weight of soil",
          required: true,
          min: 15,
          max: 22,
        },
      ],
    };
    return fields[soilType] || [];
  }, [soilType]);

  const onSubmit = (formData) => {
    updateData("inputs", formData);
    setActiveTab(3);
  };

  return (
    <div className="max-w-3xl mx-auto">
      <h2 className={`${styles.sectionTitleText}`}>Inputs</h2>
      <p className={`${styles.sectionBodyText} mb-6`}>
        Enter the required parameters for your foundation design
      </p>

      <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
        <SectionSeparator title="Loads and Moments" />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {COMMON_FIELDS.map((field) => (
            <FormField
              key={field.id}
              field={field}
              register={register}
              errors={errors}
            />
          ))}
        </div>

        <SectionSeparator title="Geometry" />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {getGeometryFields().map((field) => (
            <FormField
              key={field.id}
              field={field}
              register={register}
              errors={errors}
            />
          ))}
        </div>

        <SectionSeparator title="Soil Properties" />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {getSoilFields().map((field) => (
            <FormField
              key={field.id}
              field={field}
              register={register}
              errors={errors}
            />
          ))}
        </div>

        <SectionSeparator title="Material Properties" />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {MATERIAL_FIELDS.map((field) => (
            <FormField
              key={field.id}
              field={field}
              register={register}
              errors={errors}
            />
          ))}
        </div>

        <div className="flex justify-end mt-8">
          <button
            type="submit"
            className={`${styles.cardTitle} px-6 py-2 bg-[#145da0] text-white rounded-md hover:bg-[#0e4a7c] transition-colors focus:outline-none focus:ring-2 focus:ring-blue-300 focus:ring-offset-2 shadow-sm`}
          >
            Calculate Design
          </button>
        </div>
      </form>
    </div>
  );
}


const styles = {  
  paddingX: "sm:px-16 px-6",
  paddingY: "sm:py-16 py-6",
  padding: "sm:px-16 px-6 sm:py-16 py-10",
  
  heroHeadText:
    "font-black text-white lg:text-[80px] sm:text-[60px] xs:text-[50px] text-[40px] lg:leading-[98px] mt-2",
  heroSubText:
    "text-[#dfd9ff] font-medium lg:text-[30px] sm:text-[26px] xs:text-[20px] text-[16px] lg:leading-[40px]",
  
  sectionHeadText:
    "text-black font-bold md:text-[40px] sm:text-[30px] xs:text-[20px] text-[20px]",
  sectionSubText:
    "sm:text-[18px] text-[14px] text-secondary uppercase tracking-wider mt-4",
  sectionTitleText:
    "font-semibold text-black md:text-[24px] sm:text-[20px] xs:text-[18px] text-[16px]",
  sectionBodyText:
    "text-gray-700 sm:text-[16px] text-[14px] leading-relaxed",  
  sectionCardText:
    "text-gray-700 sm:text-[14px] text-[12px] leading-relaxed",  
  sectionGridThree:
    "grid grid-cols-1 md:grid-cols-3 gap-8 mt-12", 
  sectionGridFour:
    "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mt-16",  
  sectionContainer:
    "max-w-6.5xl mx-auto text-center",
  sectionCard:
    "bg-white p-6 rounded-lg shadow-md",
  sectionNumberBadge:
    "w-10 h-10 text-md sm:w-12 sm:h-12 sm:text-lg bg-[#145da0] text-white rounded-full mx-auto flex items-center justify-center font-bold mb-4",
  cardTitle: "font-semibold text-gray-800 md:text-[18px] sm:text-[16px] text-[14px]",
  cardDescription: "text-gray-600 sm:text-[14px] text-[12px] mt-1",
  cardUseCase: "text-[#145da0] font-medium sm:text-[12px] text-[10px] mt-2",
};

export { styles };


  
import { lazy } from 'react';

export { default as Navbar } from "./Navbar";
export { default as Footer } from "./Footer";
export { default as FeatureCard } from "./FeatureCard";
export { default as WhyChooseCard } from "./WhyChooseCard";
export { default as AdvantageCard } from "./AdvantageCard";
export { default as ComplianceItem } from "./ComplianceItem";
export const PricingTabs = lazy(() => import("./PricingTabs"));

export { default as FoundationType } from './DesignTabs/FoundationType';
export { default as InputParameters } from './DesignTabs/InputParameters';
export { default as Results } from './DesignTabs/Results';
export { default as SoilType } from './DesignTabs/SoilType';
export { default as SelectionSummary } from './DesignTabs/SelectionSummary';

export { default as ParameterInput } from './shared/ParameterInput';
export { default as ResultCard } from './shared/ResultCard';
export { default as TabButton } from './shared/TabButton';
export { default as GuidanceSection } from './shared/GuidanceSection';
export { default as SelectionBox } from './shared/SelectionBox';