// server.js
// server.js
import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import dotenv from 'dotenv';
import { healthRouter } from './routes/index.js';
import { errorHandler } from './middlewares/index.js';

// Configuration
dotenv.config();
const app = express();

// Middlewares (Order matters!)
app.use(helmet()); // Security headers
app.use(cors({
   origin: process.env.NODE_ENV === 'development'
    ? 'http://localhost:5173' 
    : 'https://yourdomain.com' 
}));
app.use(express.json({ limit: '10kb' })); // Body parser with size limit

// ===== Routes =====
app.use('/api', healthRouter); 

// ===== Error Handler =====
app.use(errorHandler);

// Server Start
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`
  Server running in ${process.env.NODE_ENV || 'development'} mode
  Listening on port ${PORT}
  Ready at http://localhost:${PORT}
  `);
});

//healthCheck.route.js
import { Router } from 'express';
import { healthCheck } from '../controllers/index.js';

const router = Router();
router.get('/health', healthCheck); 

export default router;

//health.controller.js
export const healthCheck = (req, res) => {
  res.json({ 
    status: 'OK',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development'
  });
};

//errorHnadler.js
export const errorHandler = (err, req, res, next) => {
  const status = err.status || 500;
  const message = process.env.NODE_ENV === 'development' 
    ? err.message 
    : status >= 500 ? 'Internal Server Error' : err.message;

  res.status(status).json({
    error: { status, message, ...(process.env.NODE_ENV === 'development' && { stack: err.stack }) }
  });
};