// server.js
// server.js
import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import dotenv from 'dotenv';
import { healthRouter, designRouter } from './routes/index.js';
import { errorHandler } from './middlewares/index.js';
import connectDB from './db/connect.js';

// Configuration
dotenv.config();
const app = express();

// Middlewares
app.use(helmet());
app.use(cors({
  origin: process.env.NODE_ENV === 'development' 
    ? 'http://localhost:5173' 
    : 'https://yourdomain.com'
}));
app.use(express.json({ limit: '10kb' }));

// Routes
app.use('/api/health', healthRouter);
app.use('/api/design', designRouter);

// Error Handler
app.use(errorHandler);

// Start Server with DB connection
connectDB(process.env.MONGO_URI)
  .then(() => {
    console.log('MongoDB Connected');
    const PORT = process.env.PORT || 5000;
    app.listen(PORT, () => {
      console.log(`
        Server running in ${process.env.NODE_ENV || 'development'} mode
        Listening on port ${PORT}
        Ready at http://localhost:${PORT}
      `);
    });
  })
  .catch((err) => {
    console.error('MongoDB connection failed:', err);
    process.exit(1);
  });
  
  

//healthCheck.route.js
import { Router } from 'express';
import { healthCheck } from '../controllers/index.js';

const router = Router();
router.get('/health', healthCheck); 

export default router;

//health.controller.js
export const healthCheck = (req, res) => {
  res.json({ 
    status: 'OK',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development'
  });
};

//errorHnadler.js
export const errorHandler = (err, req, res, next) => {
  const status = err.status || 500;
  const message = process.env.NODE_ENV === 'development' 
    ? err.message 
    : status >= 500 ? 'Internal Server Error' : err.message;

  res.status(status).json({
    error: { status, message, ...(process.env.NODE_ENV === 'development' && { stack: err.stack }) }
  });
};

//connect.js
import mongoose from 'mongoose';

const connectDB = (url) => {
  mongoose.set('strictQuery', true);
  return mongoose.connect(url); 
};

export default connectDB;

// design.controller.js
import createError from 'http-errors';

export const calculateFoundation = async (req, res, next) => {
  const { foundationType } = req.body;
  
  // Hardcoded to only allow isolated footing
  if (foundationType !== 'isolated') {
    return next(createError(
      400, 
      'Only isolated footing is currently supported. Contact support for other types.'
    ));
  }

  const controller = new AbortController();
  const timeout = setTimeout(() => controller.abort(), 8000); // 8s timeout

  try {
    const response = await fetch('http://localhost:8000/calculate/isolated', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(req.body.inputs),
      signal: controller.signal
    });

    if (!response.ok) {
      const error = await response.json();
      throw createError(response.status, error.detail || 'Calculation service error');
    }

    const { data } = await response.json();
    res.json(data);
  } catch (error) {
    next(createError(
      500,
      error.name === 'AbortError' ? 'Calculation timed out' : error.message
    ));
  } finally {
    clearTimeout(timeout);
  }
};


//design.route.js
import { Router } from 'express';
import { calculateFoundation } from '../controllers/index.js';

const router = Router();
router.post('/', calculateFoundation);

export default router;

